// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    FINAL_GUEST_ELF, FINAL_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use std::fs;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // Step 1: Read the files into byte arrays
    let balance_txt = fs::read("balance.txt").expect("Failed to read balance.txt");
    // let balance_sig = fs::read("balance.txt.sig").expect("Failed to read balance.txt.sig");
    // let bank_public_key = fs::read("bank_public_key.pem").expect("Failed to read bank_public_key.pem");

    
    // For example:
    // Step 2: Create the environment with input data
    let env = ExecutorEnv::builder()
        .write(&balance_txt)          // Write the challenge (balance.txt) to the environment
        .unwrap()
        .build()
        .unwrap();
    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, FINAL_GUEST_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    let output: Vec<u8> = receipt.journal.decode().unwrap();
    let output_string = String::from_utf8(output)
    .expect("Failed to convert bytes to string");
    // let decoded_output = from_utf8(&output).unwrap();
    println!("Decoded journal output: {}", output_string);
    

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(FINAL_GUEST_ID)
        .unwrap();
}
